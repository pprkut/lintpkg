#!/bin/sh
# Copyright 1994, 1998, 2000  Patrick Volkerding, Concord, CA, USA
# Copyright 2001, 2003  Slackware Linux, Inc., Concord, CA, USA
# Copyright 2007, 2009, 2011  Patrick Volkerding, Sebeka, MN, USA
# Copyright 2014  Heinz Wiesinger, Amsterdam, The Netherlands
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

VERSION="0.9.0"

# Return a package name that has been stripped of the dirname portion
# and any of the valid extensions (only):
pkgbase() {
  PKGEXT=$(echo $1 | rev | cut -f 1 -d . | rev)
  case $PKGEXT in
  'tgz' )
    PKGRETURN=$(basename $1 .tgz)
    ;;
  'tbz' )
    PKGRETURN=$(basename $1 .tbz)
    ;;
  'tlz' )
    PKGRETURN=$(basename $1 .tlz)
    ;;
  'txz' )
    PKGRETURN=$(basename $1 .txz)
    ;;
  *)
    PKGRETURN=$(basename $1)
    ;;
  esac
  echo $PKGRETURN
}

package_element() {
  STRING=$(pkgbase $1)
  ELEMENT=$2
  # Check for old style package name with one segment:
  if [ "$(echo $STRING | cut -f 1 -d -)" = "$(echo $STRING | cut -f 2 -d -)" ]; then
    if [ "$ELEMENT" = "name" ]; then
      echo $STRING
    else
      echo ""
    fi
  else # has more than one dash delimited segment
    # Count number of segments:
    INDEX=1
    while [ ! "$(echo $STRING | cut -f $INDEX -d -)" = "" ]; do
      INDEX=$(expr $INDEX + 1)
    done
    INDEX=$(expr $INDEX - 1) # don't include the null value
    # If we don't have four segments, return the old-style (or out of spec) package name:
    if [ "$INDEX" = "2" -o "$INDEX" = "3" ]; then
      if [ "$ELEMENT" = "name" ]; then
        echo $STRING
      else
        echo ""
      fi
    else # we have four or more segments, so we'll consider this a new-style name:
      if [ "$ELEMENT" = "name" ]; then
        NAME=$(expr $INDEX - 3)
        NAME="$(echo $STRING | cut -f 1-$NAME -d -)"
        echo $NAME
      elif [ "$ELEMENT" = "version" ]; then
        VER=$(expr $INDEX - 2)
        VER="$(echo $STRING | cut -f $VER -d -)"
        echo $VER
      elif [ "$ELEMENT" = "arch" ]; then
        ARCH=$(expr $INDEX - 1)
        ARCH="$(echo $STRING | cut -f $ARCH -d -)"
        echo $ARCH
      else
        BUILD="$(echo $STRING | cut -f $INDEX -d -)"
        echo $BUILD
      fi
    fi
  fi
}

clean_filename() {
  if [ -e "$1" -o -L "$1" ]; then
    EXTRAINFO=$(echo $1 | sed "s|^$WORKING_DIR||")
    EXTRAINFO=$(echo $EXTRAINFO | sed "s|\/\/|\/|g")
  else
    EXTRAINFO="$1"
  fi

  echo $EXTRAINFO
}

log_error() {
  for i in $IGNORE; do
    if [ -n "$1" -a "$i" = "$1" ]; then
      return
    fi
  done

  if ! [ "$PKG_FULLNAME" = "(none)" ]; then
    ERRORS=$(expr $ERRORS + 1)
  fi

  echo -n "$PKG_FULLNAME: E:"
  for i in "$@"; do
    echo -n " $(clean_filename "$i")"
  done
  echo ""

  if [ "$INFO" = "yes" ]; then
    info "$1"
  fi
}

log_warning() {
  for i in $IGNORE; do
    if [ -n "$1" -a "$i" = "$1" ]; then
      return
    fi
  done

  if ! [ "$PKG_FULLNAME" = "(none)" ]; then
    WARNINGS=$(expr $WARNINGS + 1)
  fi

  echo -n "$PKG_FULLNAME: W:"
  for i in "$@"; do
    echo -n " $(clean_filename "$i")"
  done
  echo ""

  if [ "$INFO" = "yes" ]; then
    info "$1"
  fi
}

log_notice() {
  for i in $IGNORE; do
    if [ -n "$1" -a "$i" = "$1" ]; then
      return
    fi
  done

  echo -n "$PKG_FULLNAME: I:"
  for i in "$@"; do
    echo -n " $(clean_filename "$i")"
  done
  echo ""

  if [ "$INFO" = "yes" ]; then
    info "$1"
  fi
}

info() {
  local_info $*
}

local_info() {
  if [ "$1" = "external-compression-utility-missing" ]; then
    echo "The necessary compression utility for uncompressing the package is missing."
    echo
  fi
}

provides() {
  if ! [ -z "$(info $1)" ]; then
    echo "yes"
  elif ! [ -z "$(local_info $1)" ]; then
    echo "yes"
  else
    echo "no"
  fi
}

usage() {
 cat << EOF
Usage: lintpkg [options] <package_filename>

Lintpkg is used to verify a .t{gz,bz,lz,xz} package against a set of common
   rules and guidelines for Slackware packaging.

   lintpkg slackware-package-1.0.0-i486-1.tgz (or .tbz, .tlz, .txz)

options:      -i --info (Display explanations for reported messages.)
              -I --explain <messageid> (Display explanations for the specified
                                       message identifiers and exit. Multiple
                                       identifiers can be specified by separating
                                       them with commas.)
              -c --check <name> (Run only the specified check. This option may be
                                given multiple times to specify multiple checks
                                to run.)
              -C --checkdir <path> (Specify path to load checks from.)
              -h --help (Display summary of command line options and exit.)
              -E --extractdir <path> (Base directory for extracted temporary files.)
              -V --version (Display version information and exit.)
              -x --exclude <messageid> (Don't show/count errors for the specified
                                       message identifiers. Multiple identifiers
                                       can be specified by separating them with
                                       commas.)
EOF
}

version() {
  echo "lintpkg version $VERSION"
}

show_info() {
  stack=$(echo $1 | tr , '\n' | sort)

  for id in $stack; do
    for check in $(ls $CHECKS); do
      source "$CHECKS/$check"
      left=""

      if [ "$(provides $id)" = "yes" ]; then
        echo "$id:"
        info $id
        local_info $id;
      else
        left="$id"
      fi

      unset -f check
      unset -f info

      if [ -z "$left" ]; then
        break
      fi
    done

    if ! [ -z "$left" ]; then
      echo "$id:"
    fi
  done
}

perform() {
  if [ -z "$1" ]; then
    LIST="$(ls $CHECKS)"
  else
    LIST="$1"
  fi

  for check in $LIST; do
    if [ -e "$CHECKS/$check.sh" ]; then
      check="$check.sh"
    fi

    source "$CHECKS/$check"
    check

    unset -f check
    unset -f info
  done

}

# usage(), exit if called with no arguments:
if [ $# = 0 ]; then
  usage;
  exit
fi

TAR=tar-1.13
$TAR --help 1> /dev/null 2> /dev/null
if [ ! $? = 0 ]; then
  TAR=tar
fi
if [ ! "`LC_MESSAGES=C $TAR --version`" = "tar (GNU tar) 1.13

Copyright (C) 1988, 92,93,94,95,96,97,98, 1999 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Written by John Gilmore and Jay Fenlason." ]; then
  echo "WARNING: lintpkg is unstable with tar > 1.13."
  echo "         You should provide a \"tar-1.13\" in your \$PATH."
  sleep 5
fi

APPLICATION_DIR=$(dirname $(realpath $0))
WORKING_DIR=""
CWD=$(pwd)

INFO="no"
CHECKS=""
LIST=""
IGNORE=""

if [ -e "/usr/share/lintpkg" ]; then
  CHECKS="/usr/share/lintpkg"
elif [ -e "$APPLICATION_DIR/checks" ]; then
  CHECKS="$APPLICATION_DIR/checks"
fi

while [ 0 ]; do
  if [ "$1" = "-I" -o "$1" = "--explain" ]; then
    if [ -z "$2" -o "$(echo $2 | head -c 1)" = "-" ]; then
      usage
      exit
    fi
    show_info $2
    exit 0
  elif [ "$1" = "-i" -o "$1" = "--info" ]; then
    INFO="yes"
    shift 1
  elif [ "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit
  elif [ "$1" = "-V" -o "$1" = "--version" ]; then
    version
    exit
  elif [ "$1" = "-c" -o "$1" = "--check" ]; then
    if [ -z "$2" -o "$(echo $2 | head -c 1)" = "-" ]; then
      usage
      exit
    fi

    LIST="$LIST $2";
    shift 2
  elif [ "$1" = "-C" -o "$1" = "--checkdir" ]; then
    if [ -z "$2" -o "$(echo $2 | head -c 1)" = "-" ]; then
      usage
      exit
    fi

    if ! [ -e "$2" ]; then
      echo "Directory does not exist: $2"
      CHECKS=""
    else
      CHECKS="$(realpath "$2")"
    fi

    shift 2
  elif [ "$1" = "-E" -o "$1" = "--extractdir" ]; then
    if [ -z "$2" -o "$(echo $2 | head -c 1)" = "-" ]; then
      usage
      exit
    fi

    if [ -e "$2" ]; then
      WORKING_DIR="$(realpath "$2")"
    else
      echo "Directory does not exist: $2"
      exit
    fi

    shift 2
  elif [ "$1" = "-x" -o "$1" = "--exclude" ]; then
    if [ -z "$2" -o "$(echo $2 | head -c 1)" = "-" ]; then
      usage
      exit
    fi

    IGNORE=$(echo $2 | tr , '\n')
    shift 2
  else
    break
  fi
done

if [ -z "$WORKING_DIR" ]; then
  WORKING_DIR=$(mktemp -d -t lintpkg.XXXXXX)
else
  WORKING_DIR=$(mktemp -d -p "$WORKING_DIR" -t lintpkg.XXXXXX 2> /dev/null)
fi

if [ -z "$WORKING_DIR" ]; then
  echo "Couldn't create temporary directory"
  exit 1
fi

if [ -z "$CHECKS" -o -z "$(ls -1 $CHECKS)" ]; then
  echo "No lint checks found!"
  exit 1
fi

ERRORS=0
WARNINGS=0
PACKAGES=0

for PACKAGE in $*; do

  PKG_FULLNAME="(none)"

  if ! [ -e "$PACKAGE" ]; then
    log_error "No package found with name $PACKAGE"
    continue
  fi

  PKG_NAME=$(package_element $PACKAGE name)
  PKG_VERSION=$(package_element $PACKAGE version)
  PKG_ARCH=$(package_element $PACKAGE arch)
  PKG_BUILD=$(package_element $PACKAGE build)
  PKG_EXTENSION=$(echo $PACKAGE | rev | cut -f 1 -d . | rev)
  PKG_FULLNAME=$(pkgbase $PACKAGE)

  PACKAGES=$(expr $PACKAGES + 1)

  # Determine compressor utility:
  case $PKG_EXTENSION in
    'tgz' )
      packagecompression=gzip
      ;;
    'tbz' )
      packagecompression=bzip2
      ;;
    'tlz' )
      packagecompression=lzma
      ;;
    'txz' )
      packagecompression=xz
      ;;
  esac

  # Test presence of external compression utility:
  if ! $packagecompression --help 1> /dev/null 2> /dev/null ; then
    log_notice "external-compression-utility-missing" "$packagecompression"
    continue
  fi

  PKG_LISTING=$(cat $PACKAGE | $packagecompression -dc | $TAR ts)
  PKG_DETAILED_LISTING=$(cat $PACKAGE | $packagecompression -dc | $TAR tvs)

  cd $WORKING_DIR

    if ! [ -e "$PACKAGE" ]; then
      PACKAGE="$CWD/$PACKAGE"
    fi

    ( umask 000 ; cat $PACKAGE | $packagecompression -dc | $TAR xf - 2> /dev/null )

    perform "$LIST"

  cd $CWD

  rm -rf "$WORKING_DIR/"*
done

echo "$PACKAGES packages checked; $ERRORS errors and $WARNINGS warnings."

rm -rf $WORKING_DIR

if [ $ERRORS -gt 0 -o $WARNINGS -gt 0 ]; then
  exit 64
else
  exit 0
fi
